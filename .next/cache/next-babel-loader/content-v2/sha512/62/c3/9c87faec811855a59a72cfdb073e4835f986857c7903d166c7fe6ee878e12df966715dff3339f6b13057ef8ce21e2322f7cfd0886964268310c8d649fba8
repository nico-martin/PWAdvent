{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useFormContext } from 'react-hook-form';\nexport const ConnectForm = ({\n  children\n}) => {\n  const methods = useFormContext();\n  return children(_objectSpread({}, methods));\n};","map":{"version":3,"sources":["C:/Users/admin/Documents/Dev/PWAdvent/theme/Form/ConnectForm.tsx"],"names":["useFormContext","ConnectForm","children","methods"],"mappings":";;;;;;AACA,SAASA,cAAT,QAA+B,iBAA/B;AAEA,OAAO,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC3C,QAAMC,OAAO,GAAGH,cAAc,EAA9B;AAEA,SAAOE,QAAQ,mBACVC,OADU,EAAf;AAGD,CANM","sourcesContent":["import React from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nexport const ConnectForm = ({ children }) => {\n  const methods = useFormContext();\n\n  return children({\n    ...methods,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}