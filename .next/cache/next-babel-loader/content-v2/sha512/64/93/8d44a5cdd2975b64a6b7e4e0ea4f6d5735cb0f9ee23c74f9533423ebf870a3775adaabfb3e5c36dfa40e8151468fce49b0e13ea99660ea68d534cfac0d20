{"ast":null,"code":"import React from 'react';\n\nconst useWindowSize = () => {\n  const [windowSize, setWindowSize] = React.useState({\n    width: null,\n    height: null\n  });\n  React.useEffect(() => {\n    const handleResize = () => setWindowSize({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n\n    window.addEventListener('resize', handleResize);\n    window.addEventListener('orientationchange', handleResize);\n    window.setTimeout(() => handleResize(), 1000);\n    handleResize();\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      window.removeEventListener('orientationchange', handleResize);\n    };\n  }, []);\n  return windowSize;\n};\n\nexport default useWindowSize;","map":{"version":3,"sources":["C:/Users/admin/Documents/Dev/PWAdvent/components/hooks/useWindowSize.tsx"],"names":["React","useWindowSize","windowSize","setWindowSize","useState","width","height","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","setTimeout","removeEventListener"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,aAAa,GAAG,MAAyC;AAC7D,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BH,KAAK,CAACI,QAAN,CAAe;AACjDC,IAAAA,KAAK,EAAE,IAD0C;AAEjDC,IAAAA,MAAM,EAAE;AAFyC,GAAf,CAApC;AAKAN,EAAAA,KAAK,CAACO,SAAN,CAAgB,MAAM;AACpB,UAAMC,YAAY,GAAG,MACnBL,aAAa,CAAC;AACZE,MAAAA,KAAK,EAAEI,MAAM,CAACC,UADF;AAEZJ,MAAAA,MAAM,EAAEG,MAAM,CAACE;AAFH,KAAD,CADf;;AAMAF,IAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCJ,YAAlC;AACAC,IAAAA,MAAM,CAACG,gBAAP,CAAwB,mBAAxB,EAA6CJ,YAA7C;AACAC,IAAAA,MAAM,CAACI,UAAP,CAAkB,MAAML,YAAY,EAApC,EAAwC,IAAxC;AACAA,IAAAA,YAAY;AAEZ,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACK,mBAAP,CAA2B,QAA3B,EAAqCN,YAArC;AACAC,MAAAA,MAAM,CAACK,mBAAP,CAA2B,mBAA3B,EAAgDN,YAAhD;AACD,KAHD;AAID,GAhBD,EAgBG,EAhBH;AAkBA,SAAON,UAAP;AACD,CAzBD;;AA2BA,eAAeD,aAAf","sourcesContent":["import React from 'react';\n\nconst useWindowSize = (): { width: number; height: number } => {\n  const [windowSize, setWindowSize] = React.useState({\n    width: null,\n    height: null,\n  });\n\n  React.useEffect(() => {\n    const handleResize = () =>\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n\n    window.addEventListener('resize', handleResize);\n    window.addEventListener('orientationchange', handleResize);\n    window.setTimeout(() => handleResize(), 1000);\n    handleResize();\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      window.removeEventListener('orientationchange', handleResize);\n    };\n  }, []);\n\n  return windowSize;\n};\n\nexport default useWindowSize;\n"]},"metadata":{},"sourceType":"module"}